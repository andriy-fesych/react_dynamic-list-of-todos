{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","setUser","selectedUserId","className","map","item","classNames","completed","type","checked","readOnly","title","userId","onClick","id","API_URL","getUser","fetch","then","response","json","CurrentUser","clearUser","useState","user","loadUser","useCallback","a","loadedUser","useEffect","name","email","phone","App","setTodos","setSelectedUserId","query","setQuery","filter","setFilter","loadTodos","loadedTodos","visibleTodos","todo","toUpperCase","includes","placeholder","onChange","event","target","value","prevTodos","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7e2e65a.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  setUser: (arg0: number) => void,\n  selectedUserId: number | null,\n}\n\nexport const TodoList: React.FC<Props> = React\n  .memo(({ todos, setUser, selectedUserId }) => (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todos.map(item => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !item.completed },\n                { 'TodoList__item--checked': item.completed },\n              )}\n              key={item.id}\n            >\n              <label>\n                {item.completed\n                  ? <input type=\"checkbox\" checked readOnly />\n                  : <input type=\"checkbox\" readOnly /> }\n                <p>{item.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                    selectedUserId !== item.userId,\n                  },\n                )}\n                data-cy=\"userButton\"\n                type=\"button\"\n                onClick={() => {\n                  setUser(item.userId);\n                }}\n              >\n                User&nbsp;#\n                {item.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  ));\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api`;\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ninterface Props {\n  userId: number;\n  clearUser: (arg0: number | null) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [user, setUser] = useState<User | null>();\n\n  const loadUser = useCallback(\n    async () => {\n      try {\n        const loadedUser = await getUser(userId);\n\n        if (loadedUser) {\n          setUser(loadedUser);\n        }\n      } catch {\n        setUser(null);\n      }\n    },\n    [userId],\n  );\n\n  useEffect(() => {\n    loadUser();\n  }, [userId]);\n\n  return user\n    ? (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n        <button\n          className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n          \"\n          type=\"button\"\n          onClick={() => {\n            clearUser(null);\n          }}\n        >\n          Clear\n        </button>\n      </>\n    )\n    : (<h1>something went horribly wrong</h1>);\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState<number | null>(8);\n  const [query, setQuery] = useState<string>('');\n  const [filter, setFilter] = useState<string>('all');\n\n  const loadTodos = useCallback(\n    async () => {\n      const loadedTodos = await getTodos();\n\n      setTodos(loadedTodos);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const queryChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilter(event.target.value);\n  };\n\n  const visibleTodos = todos.filter(\n    todo => todo.title.toUpperCase().includes(query.toUpperCase()),\n  ).filter(todo => {\n    if (filter === 'all') {\n      return true;\n    }\n\n    if (filter === 'completed') {\n      return todo.completed;\n    }\n\n    return !todo.completed;\n  });\n\n  const randomizeHandler = () => {\n    setTodos(prevTodos => [...prevTodos].sort(() => Math.random() - 0.5));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <div className=\"field has-addons mt-2\">\n          <div className=\"control\">\n            <input\n              data-cy=\"filterByTitle\"\n              type=\"text\"\n              id=\"search-query\"\n              className=\"input is-link is-medium is-rounded\"\n              placeholder=\"Type search word\"\n              onChange={queryChangeHandler}\n            />\n          </div>\n        </div>\n        <div className=\"select is-rounded is-success is-light is-outlined\">\n          <select\n            value={filter}\n            onChange={handleFilter}\n          >\n            <option key=\"all\" value=\"all\">ALL</option>\n            <option key=\"active\" value=\"active\">Active</option>\n            <option key=\"completed\" value=\"completed\">Completed</option>\n          </select>\n        </div>\n        <button\n          className=\"button is-success is-rounded\"\n          type=\"button\"\n          onClick={randomizeHandler}\n        >\n          Randomize\n        </button>\n        <TodoList\n          todos={visibleTodos}\n          setUser={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={setSelectedUserId}\n            />\n          ) : <h2>No user selected</h2>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}